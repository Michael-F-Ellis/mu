// Code generated by gen_mu.py. DO NOT EDIT.

package mu

// Sum returns the sum of its arguments.
// An empty argument list raises a panic.
func Sum(nums ...int) int {
	if len(nums) == 0 {
		panic("Sum argument list empty")
	}
	var total int = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumI8 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumI8(nums ...int8) int8 {
	if len(nums) == 0 {
		panic("SumI8 argument list empty")
	}
	var total int8 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumI16 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumI16(nums ...int16) int16 {
	if len(nums) == 0 {
		panic("SumI16 argument list empty")
	}
	var total int16 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumI32 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumI32(nums ...int32) int32 {
	if len(nums) == 0 {
		panic("SumI32 argument list empty")
	}
	var total int32 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumI64 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumI64(nums ...int64) int64 {
	if len(nums) == 0 {
		panic("SumI64 argument list empty")
	}
	var total int64 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumU8 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumU8(nums ...uint8) uint8 {
	if len(nums) == 0 {
		panic("SumU8 argument list empty")
	}
	var total uint8 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumU16 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumU16(nums ...uint16) uint16 {
	if len(nums) == 0 {
		panic("SumU16 argument list empty")
	}
	var total uint16 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumU32 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumU32(nums ...uint32) uint32 {
	if len(nums) == 0 {
		panic("SumU32 argument list empty")
	}
	var total uint32 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumU64 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumU64(nums ...uint64) uint64 {
	if len(nums) == 0 {
		panic("SumU64 argument list empty")
	}
	var total uint64 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumF32 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumF32(nums ...float32) float32 {
	if len(nums) == 0 {
		panic("SumF32 argument list empty")
	}
	var total float32 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// SumF64 returns the sum of its arguments.
// An empty argument list raises a panic.
func SumF64(nums ...float64) float64 {
	if len(nums) == 0 {
		panic("SumF64 argument list empty")
	}
	var total float64 = 0
	for _, num := range nums {
		total += num
	}
	return total
}

// Min returns the minimum of its arguments.
// An empty argument list raises a panic.
func Min(nums ...int) int {
	if len(nums) == 0 {
		panic("Min argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinI8 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinI8(nums ...int8) int8 {
	if len(nums) == 0 {
		panic("MinI8 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinI16 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinI16(nums ...int16) int16 {
	if len(nums) == 0 {
		panic("MinI16 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinI32 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinI32(nums ...int32) int32 {
	if len(nums) == 0 {
		panic("MinI32 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinI64 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinI64(nums ...int64) int64 {
	if len(nums) == 0 {
		panic("MinI64 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinU8 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinU8(nums ...uint8) uint8 {
	if len(nums) == 0 {
		panic("MinU8 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinU16 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinU16(nums ...uint16) uint16 {
	if len(nums) == 0 {
		panic("MinU16 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinU32 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinU32(nums ...uint32) uint32 {
	if len(nums) == 0 {
		panic("MinU32 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinU64 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinU64(nums ...uint64) uint64 {
	if len(nums) == 0 {
		panic("MinU64 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinF32 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinF32(nums ...float32) float32 {
	if len(nums) == 0 {
		panic("MinF32 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// MinF64 returns the minimum of its arguments.
// An empty argument list raises a panic.
func MinF64(nums ...float64) float64 {
	if len(nums) == 0 {
		panic("MinF64 argument list empty")
	}
	min := nums[0]
	for _, num := range nums {
		if num < min {
			min = num
		}
	}
	return min
}

// Max returns the maximum of its arguments.
// An empty argument list raises a panic.
func Max(nums ...int) int {
	if len(nums) == 0 {
		panic("Max argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxI8 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxI8(nums ...int8) int8 {
	if len(nums) == 0 {
		panic("MaxI8 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxI16 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxI16(nums ...int16) int16 {
	if len(nums) == 0 {
		panic("MaxI16 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxI32 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxI32(nums ...int32) int32 {
	if len(nums) == 0 {
		panic("MaxI32 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxI64 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxI64(nums ...int64) int64 {
	if len(nums) == 0 {
		panic("MaxI64 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxU8 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxU8(nums ...uint8) uint8 {
	if len(nums) == 0 {
		panic("MaxU8 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxU16 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxU16(nums ...uint16) uint16 {
	if len(nums) == 0 {
		panic("MaxU16 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxU32 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxU32(nums ...uint32) uint32 {
	if len(nums) == 0 {
		panic("MaxU32 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxU64 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxU64(nums ...uint64) uint64 {
	if len(nums) == 0 {
		panic("MaxU64 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxF32 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxF32(nums ...float32) float32 {
	if len(nums) == 0 {
		panic("MaxF32 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// MaxF64 returns the maximum of its arguments.
// An empty argument list raises a panic.
func MaxF64(nums ...float64) float64 {
	if len(nums) == 0 {
		panic("MaxF64 argument list empty")
	}
	max := nums[0]
	for _, num := range nums {
		if num > max {
			max = num
		}
	}
	return max
}

// Abs returns the absolute values of its argument.
func Abs(num int) int {
	var abs int
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbs returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbs(nums ...int) []int {
	if len(nums) == 0 {
		panic("VAbs argument list empty")
	}
	var abs []int
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}

// AbsI8 returns the absolute values of its argument.
func AbsI8(num int8) int8 {
	var abs int8
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbsI8 returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbsI8(nums ...int8) []int8 {
	if len(nums) == 0 {
		panic("VAbsI8 argument list empty")
	}
	var abs []int8
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}

// AbsI16 returns the absolute values of its argument.
func AbsI16(num int16) int16 {
	var abs int16
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbsI16 returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbsI16(nums ...int16) []int16 {
	if len(nums) == 0 {
		panic("VAbsI16 argument list empty")
	}
	var abs []int16
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}

// AbsI32 returns the absolute values of its argument.
func AbsI32(num int32) int32 {
	var abs int32
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbsI32 returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbsI32(nums ...int32) []int32 {
	if len(nums) == 0 {
		panic("VAbsI32 argument list empty")
	}
	var abs []int32
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}

// AbsI64 returns the absolute values of its argument.
func AbsI64(num int64) int64 {
	var abs int64
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbsI64 returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbsI64(nums ...int64) []int64 {
	if len(nums) == 0 {
		panic("VAbsI64 argument list empty")
	}
	var abs []int64
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}

// AbsF32 returns the absolute values of its argument.
func AbsF32(num float32) float32 {
	var abs float32
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbsF32 returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbsF32(nums ...float32) []float32 {
	if len(nums) == 0 {
		panic("VAbsF32 argument list empty")
	}
	var abs []float32
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}

// AbsF64 returns the absolute values of its argument.
func AbsF64(num float64) float64 {
	var abs float64
	switch num < 0 {
	case true:
		abs = -num
	default:
		abs = num
	}
	return abs
}

// VAbsF64 returns the absolute values of its arguments.
// An empty argument list raises a panic.
func VAbsF64(nums ...float64) []float64 {
	if len(nums) == 0 {
		panic("VAbsF64 argument list empty")
	}
	var abs []float64
	for _, num := range nums {
		switch num < 0 {
		case true:
			abs = append(abs, -num)
		default:
			abs = append(abs, num)
		}
	}
	return abs
}
